pipeline {
    agent any

    environment {
        IMAGE_NAME = 'flask-app'
        AWS_ACCOUNT_ID = '<aws-account-id>'
        AWS_REGION = 'us-west-2'
        ECR_REPO = 'flask-app-repo'
        CLUSTER_NAME = 'flask-cluster'
        SERVICE_NAME = 'flask-service'
        SLACK_CHANNEL = '#deploy-notifications'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git 'https://github.com/your/repo.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $IMAGE_NAME .'
                }
            }
        }

        stage('Push to AWS ECR') {
            steps {
                script {
                    // Login to AWS ECR
                    sh """
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
                    """
                    // Tag the image
                    sh "docker tag $IMAGE_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:latest"
                    // Push the image to ECR
                    sh "docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:latest"
                }
            }
        }

        stage('Deploy to ECS') {
            steps {
                script {
                    sh """
                    ecs-cli configure --region $AWS_REGION --access-key $AWS_ACCESS_KEY_ID --secret-key $AWS_SECRET_ACCESS_KEY --cluster $CLUSTER_NAME
                    ecs-cli compose --file docker-compose.yml service up
                    """
                }
            }
        }

        stage('Notify Slack') {
            steps {
                script {
                    slackSend channel: SLACK_CHANNEL, message: 'Deployment successful!'
                }
            }
        }
    }
}

